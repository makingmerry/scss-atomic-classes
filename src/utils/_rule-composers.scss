// # Rule generators
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

// # Compose breakpoint rules
//
// @global-vars:
// $breakpoint-mod
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-breakpoint-rules($map) {
  @for $i from 0 through length($map) {
    @if $i == 0 {
      $breakpoint-mod: "" !global;
      @content;
    } @else {
      $size-prop: nth(map-keys($map), $i);
      $size-val: map-get($map, $size-prop);
      $breakpoint-mod: "--" + str-slice($size-prop, 0, 1) !global;
      @media (min-width: $size-val) {
        @content;
      }
    }
  }
}

// # Compose stepped rules
//
// @global-vars:
// $step-index
// $step-val
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-stepped-rules($map) {
  $base-val: map-get($map, base-val);
  $ratio: map-get($map, ratio);
  $steps: map-get($map, steps);

  @for $index from 1 through $steps {
    $step-index: $index !global;
    $step-val: pow($ratio, $index - 1) * $base-val !global;
    @content;
  }
}

// # Compose mapped rules
//
// @global-vars:
// $map-prop
// $map-val
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-mapped-rules($map) {
  @each $prop, $val in $map {
    $map-prop: $prop !global;
    $map-val: $val !global;
    @content;
  }
}

// # Compose column rules
//
// @global-vars:
// $column-index
// $column-width
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-column-rules($count) {
  @for $index from 1 through $count {
    $column-index: $index !global;
    $column-width: 100 / ($count / $index) + "%" !global;
    @content;
  }
}

// # Compose counter rules
//
// @global-vars:
// $counter-index
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-counter-rules($count, $start: 1) {
  @for $index from $start through $count {
    $counter-index: $index !global;
    @content;
  }
}

// # Compose font-size rules
//
// @global-vars:
// $font-size-index
// $font-size-val
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-font-size-rules($map) {
  $base-val: map-get($map, base-val);
  $base-index: map-get($map, base-index);
  $ratio: map-get($map, ratio);
  $smaller-steps: map-get($map, smaller-steps);

  $count: $base-index + $smaller-steps;
  $index: 1;
  $index-exponent: $base-index;

  @while $index <= $count {
    $font-size-index: $index !global;
    $font-size-val: pow($ratio, $index-exponent - 1) * $base-val !global;
    @content;
    $index: $index + 1;
    $index-exponent: $index-exponent - 1;
  }
}
