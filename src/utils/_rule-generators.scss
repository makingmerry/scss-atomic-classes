// # Rule generators
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

// # Compose breakpoint rules
//
// @global-vars:
// $breakpoint-mod
////////////////////////////////////////
////////////////////////////////////////

@mixin breakpoint($map, $size) {
  @if $size == base {
    @content;
  } @else {
    @media (min-width: map-get($map, $size)) {
      @content;
    }
  }
}

@mixin compose-breakpoint-rules($map) {
  @for $i from 0 through length($map) {
    $size: base;
    $breakpoint-mod: "" !global;

    // Compose base rules with @media-query blocks.
    @if $i != 0 {
      $size: nth(map-keys($map), $i);
      $breakpoint-mod: "--" + str-slice($size, 0, 1) !global;
    }

    @include breakpoint($map, $size) {
      @content;
    }
  }
}

// # Compose index rules
//
// @global-vars:
// $index-count
// $index-val
////////////////////////////////////////
////////////////////////////////////////

// Helper function to determine next value in index
@function index-val($base-val, $count, $ratio) {
  @return pow($ratio, $count - 1) * $base-val;
}

@mixin compose-index-rules($map) {
  $base-val: map-get($map, base-val);
  $ratio: map-get($map, ratio);
  $counts: map-get($map, counts);

  @for $count from 1 through $counts {
    $index-count: $count !global;
    $index-val: index-val($base-val, $count, $ratio) !global;
    @content;
  }
}

// # Compose map rules
//
// @global-vars:
// $map-prop
// $map-val
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-map-rules($map) {
  @each $prop, $val in $map {
    $map-prop: $prop !global;
    $map-val: $val !global;
    @content;
  }
}

// # Compose column rules
//
// @global-vars:
// $column-count
// $column-width-val
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-column-rules($counts) {
  @for $count from 1 through $counts {
    $column-count: $count !global;
    $column-width-val: 100 / ($counts / $count) + "%" !global;
    @content;
  }
}

// # Compose count rules
//
// @global-vars:
// $count
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-count-rules($end, $start: 1) {
  @for $i from $start through $end {
    $count-i: $i !global;
    @content;
  }
}

// # Compose font-size rules
//
// @global-vars:
////////////////////////////////////////
////////////////////////////////////////

@mixin compose-font-size-rules() {
}
